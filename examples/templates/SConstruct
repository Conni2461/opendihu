# SConstruct file for a single example.
#
# Usage: `scons BUILD_TYPE=debug` will build debug version, `scons` will build release version.


# read variables from user file 'config.py' and from command line arguments, e.g. `scons BUILD_TYPE=release`
vars = Variables('config.py', ARGUMENTS)

# specify type and default value for recognized variables
#vars.Add(BoolVariable('DUMMY', 'This is left in the code to see how bools work', 0))
vars.Add(EnumVariable('BUILD_TYPE', 'The build type, according to that different compiler options will be set. (Shortcuts: ''d'',''r'')',
                    'release', allowed_values=('debug', 'release'), ignorecase = 2, map={'d':'debug', 'r':'release'}))

# initialize environment object containing build system settings such as compilers and flags
# command line options are considered
env = Environment(variables = vars)

# check for unknown variables and output warning
unknown = vars.UnknownVariables()
if unknown:
  print "WARNING: Unknown variables from command line arguments or config file `config.py`:", unknown.keys()
    
# generate help text for the page `scons -h`
Help(vars.GenerateHelpText(env))

# add library paths of petsc and lapack
env.Append(LIBPATH = ['../../../dependencies/petsc/install/lib'])
env.Append(LIBPATH = ['../../../dependencies/lapack/install/lib'])

# -----------------------------------------------
# depending on the variable BUILD_TYPE either build with debug or release settings
if env["BUILD_TYPE"] == "debug":
  
  # debug build
  variant_dir = "build_debug"           # folder of build
  env.ParseFlags('-DDEBUG -ggdb -O0 -std=c++1z')   # gcc flags, will be sorted automatically into linker and compiler flags
  env.Append(LIBPATH = ['../../../core/build/debug'])
  
else:
  # release build
  variant_dir = 'build_release'         # folder of build
  env.ParseFlags('-O3 -std=c++1z')   # gcc flags, will be sorted automatically into linker and compiler flags
  env.Append(LIBPATH = ['../../../core/build/release'])

# Set the include path for header files
env.Append(CPPPATH = ['../../../dependencies/petsc/install/include'])
env.Append(CPPPATH = ['../../../core/src', '/usr/include/mpi'])
  
# call SConscript file for the actual build in the specified build directory variant_dir
SConscript(dirs='.',
           variant_dir=variant_dir,
           duplicate=False,
           exports="env")
